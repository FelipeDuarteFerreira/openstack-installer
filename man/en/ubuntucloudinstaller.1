.\" Man page generated from reStructuredText.
.
.TH "TODO" "1" "April 16, 2014" "0.13+git20140410" "Ubuntu Cloud Installer"
.SH NAME
Todo \- Ubuntu Cloud Installer Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%Github project page\fP
.INDENT 0.0
.INDENT 3.5
.sp
This is work in progress and some information will be
missing. Please consult the source code or file a bug at the Github
project page.
.sp
Contributions are welcomed.
.UNINDENT
.UNINDENT
.SH GUIDES
.SS Developer Guide
.SS Developer Guide \- Setup
.sp
The document walks you through installing the necessary packages and
environment preparations in order to build the cloud installer.
.SS Base system
.sp
Development and testing is done on Ubuntu and using a release of
\fBTrusty\fP or later.
.SS Needed packages
.INDENT 0.0
.IP \(bu 2
debhelper
.IP \(bu 2
dh\-python
.IP \(bu 2
python3\-all
.IP \(bu 2
python3\-mock
.IP \(bu 2
python3\-nose
.IP \(bu 2
python3\-oauthlib
.IP \(bu 2
python3\-passlib
.IP \(bu 2
python3\-requests
.IP \(bu 2
python3\-requests\-oauthlib
.IP \(bu 2
python3\-setuptools
.IP \(bu 2
python3\-urwid
.IP \(bu 2
python3\-ws4py
.IP \(bu 2
python3\-yaml
.UNINDENT
.SS Building cloud installer
.sp
\fBSbuild\fP is the preferred way for building the package set. Please
refer to this \fI\%wiki page\fP on
setting up sbuild.
.sp
Just like the base system the sbuild chroots need to be \fITrusty\fP or
later.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The architecture of the chroots do not matter.
.UNINDENT
.UNINDENT
.sp
Once \fBsbuild\fP is configured, checkout the source code of the
installer
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/Ubuntu\-Solutions\-Engineering/cloud\-installer.git ~/cloud\-installer
$ cd cloud\-installer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
From here you can build the entire package set by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ make sbuild
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Once finished your packages will be stored in the top level directory
where your cloud\-installer project is kept.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ls ../*.deb
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Building documentation
.sp
Documentation will be built in \fBdocs/_build/html\fP, and requires \fBSphinx\fP to build.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd docs && make html
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Running Tests
.sp
Tests can be ran against a set of exported data(\fBdefault\fP) or a live machine. In
order to test against live data the following environment variable is
used.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ JUJU_LIVE=1 nosetests3 test
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Single Installer Guide
.SS Pre\-requisites
.sp
Add the \fIcloud\-installer\fP ppa to your system.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt\-add\-repository ppa:cloud\-installer/ppa
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Adding the ppa is only necessary until an official release to the
archives has been announced.
.UNINDENT
.UNINDENT
.SS Installation
.sp
Install the cloud\-installer via \fIapt\-get\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt\-get install cloud\-installer
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Start the installation
.sp
To start the installation run the following command
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo cloud\-install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An initial dialog box will appear asking you to select which type of
install, choose \fBSingle system\fP\&.
.SS Next Steps
.sp
The installer will run through a series of steps starting with making
sure the necessary bits are available for a single system installation
and ending with a \fIjuju\fP bootstrapped system.
.sp
When the bootstrapping has finished it will immediately load the
status screen. From there you can see the nodes listed along with the
deployed charms necessary to start your private openstack cloud.
.sp
Adding additional compute nodes, block storage, object storage, and
controllers can be done by pressing \fIF6\fP and making the selection on
the dialog box.
.sp
Finally, once those nodes are displayed and the charms deployed the
horizon dashboard will be available to you for managing your openstack
cloud.
.SS Multi Installer Guide
.INDENT 0.0
.INDENT 3.5
.SS Todo
.INDENT 0.0
.IP \(bu 2
Discuss a MaaS setup
.IP \(bu 2
Outline hardware resources needed for a multi install
.UNINDENT
.UNINDENT
.UNINDENT
.SS Pre\-requisites
.sp
Add the \fIcloud\-installer\fP ppa to your system.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt\-add\-repository ppa:cloud\-installer/ppa
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Adding the ppa is only necessary until an official release to the
archives has been announced.
.UNINDENT
.UNINDENT
.SS Installation
.sp
Install the cloud\-installer via \fIapt\-get\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt\-get install cloud\-installer
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Start the installation
.sp
To start the installation run the following command
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo cloud\-install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An initial dialog box will appear asking you to select which type of
install, choose \fBMulti\-system\fP\&.
.SS Next Steps
.sp
The installer will run through a series of steps starting with making
sure the necessary bits are available for a single system installation
and ending with a \fIjuju\fP bootstrapped system.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
Finish this guide.
.UNINDENT
.UNINDENT
.SH REFERENCE
.SS \fBcloudinstall.juju\fP \-\-\- Juju interface
.sp
Represents a juju status
.INDENT 0.0
.TP
.B class cloudinstall.juju.JujuState(raw_yaml)
Bases: \fBbuiltins.object\fP
.sp
Represents a global Juju state
.INDENT 7.0
.TP
.B JujuState.machine(instance_id)
Return single machine state
.INDENT 7.0
.TP
.B Parameters
\fBinstance_id\fP (\fIstr\fP) \-\- machine instance_id
.TP
.B Returns
machine
.TP
.B Return type
cloudinstall.machine.Machine()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B JujuState.machines()
Machines property
.INDENT 7.0
.TP
.B Returns
machines known to juju
.TP
.B Return type
generator
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B JujuState.machines_allocated()
Machines allocated property
.INDENT 7.0
.TP
.B Returns
Machines in an allocated state
.TP
.B Return type
iter
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B JujuState.machines_unallocated()
Machines unallocated property
.INDENT 7.0
.TP
.B Returns
Machines in an unallocated state
.TP
.B Return type
iter
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B JujuState.service(name)
Return a single service entry
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- service/charm name
.TP
.B Returns
a service entry
.TP
.B Return type
Service()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B JujuState.services
Juju services property
.INDENT 7.0
.TP
.B Returns
Service() of all loaded services
.TP
.B Return type
generator
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fBcloudinstall.maas\fP \-\-\- Maas interface
.INDENT 0.0
.TP
.B class cloudinstall.maas.MaasMachine(machine_id, machine)
Bases: \fBcloudinstall.machine.Machine\fP
.sp
Single maas machine
.INDENT 7.0
.TP
.B arch
Return architecture
.INDENT 7.0
.TP
.B Returns
architecture type
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cpu_cores
Returns number of cpu\-cores
.INDENT 7.0
.TP
.B Returns
number of cpus
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B hostname
Query hostname reported by MaaS
.INDENT 7.0
.TP
.B Returns
hostname
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B instance_id
Returns instance\-id of a machine
.INDENT 7.0
.TP
.B Returns
instance\-id of machine
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ip_addresses
Ip addresses for machine
.INDENT 7.0
.TP
.B Returns
ip addresses
.TP
.B Return type
list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mac_address
Macaddress set of maas machine
.INDENT 7.0
.TP
.B Returns
mac_address and resource_uri
.TP
.B Return type
dict
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mem
Return memory
.INDENT 7.0
.TP
.B Returns
memory size
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B owner
Machine owner
.INDENT 7.0
.TP
.B Returns
owner
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B power_type
Machine power type
.INDENT 7.0
.TP
.B Returns
machines power type
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B status
Status of machine state
.sp
Those statuses are defined as follows:
DECLARED = 0
COMMISSIONING = 1
FAILED_TESTS = 2
MISSING = 3
READY = 4
RESERVED = 5
ALLOCATED = 6
RETIRED = 7
.INDENT 7.0
.TP
.B Returns
status
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B storage
Return storage
.INDENT 7.0
.TP
.B Returns
storage size
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B system_id
Returns system id of a maas machine
.INDENT 7.0
.TP
.B Returns
system id of machine
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag
Machine tag
.INDENT 7.0
.TP
.B Returns
tag defined
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag_names
Tag names for machine
.INDENT 7.0
.TP
.B Returns
tags associated with machine
.TP
.B Return type
list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B zone
Zone information
.INDENT 7.0
.TP
.B Returns
zone information
.TP
.B Return type
dict
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.maas.MaasState(maas)
Bases: \fBbuiltins.object\fP
.sp
Represents global MaaS state
.INDENT 7.0
.TP
.B ALLOCATED = 6
.UNINDENT
.INDENT 7.0
.TP
.B COMMISSIONING = 1
.UNINDENT
.INDENT 7.0
.TP
.B DECLARED = 0
.UNINDENT
.INDENT 7.0
.TP
.B FAILED_TESTS = 2
.UNINDENT
.INDENT 7.0
.TP
.B MISSING = 3
.UNINDENT
.INDENT 7.0
.TP
.B READY = 4
.UNINDENT
.INDENT 7.0
.TP
.B RESERVED = 5
.UNINDENT
.INDENT 7.0
.TP
.B RETIRED = 7
.UNINDENT
.INDENT 7.0
.TP
.B machine(instance_id)
Return single machine state
.INDENT 7.0
.TP
.B Parameters
\fBinstance_id\fP (\fIstr\fP) \-\- machine instance_id
.TP
.B Returns
machine
.TP
.B Return type
cloudinstall.maas.MaasMachine
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B machines()
Maas Machines
.INDENT 7.0
.TP
.B Returns
machines known to maas
.TP
.B Return type
generator
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B num_in_state(state)
Number of machines in a particular state
.INDENT 7.0
.TP
.B Parameters
\fBstate\fP (\fIstr\fP) \-\- a machine state
.TP
.B Returns
number of machines in \fIstatus\fP
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.maas.auth.MaasAuth
Bases: \fBbuiltins.object\fP
.sp
MAAS Authorization class
.INDENT 7.0
.TP
.B consumer_key
Maas consumer key
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_api_key(username=\(aqroot\(aq)
MAAS api key
.INDENT 7.0
.TP
.B Parameters
\fBusername\fP (\fIstr\fP) \-\- (optional) MAAS user to query for credentials
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_logged_in
Checks if we are logged into the MAAS api
.INDENT 7.0
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B login()
Login to MAAS api server
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
Deprecate once MAAS api matures (\fI\%http://pad.lv/1058137\fP)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B read_config(url, creds)
Read cloud\-init config from given \fIurl\fP into \fIcreds\fP dict.
.sp
Updates any keys in \fIcreds\fP that are None with their corresponding
values in the config.
.sp
Important keys include \fImetadata_url\fP, and the actual OAuth
credentials.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP (\fIstr\fP) \-\- cloud\-init config URL
.IP \(bu 2
\fBcreds\fP (\fIdict\fP) \-\- MAAS user credentials
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B token_key
Maas oauth token key
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B token_secret
Maas oauth token secret
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.maas.client.MaasClient(auth)
Bases: \fBbuiltins.object\fP
.sp
Client Class
.INDENT 7.0
.TP
.B delete(url, params=None)
Performs a authenticated DELETE against a MAAS endpoint
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- MAAS endpoint
.IP \(bu 2
\fBparams\fP \-\- extra data sent with the HTTP request
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get(url, params=None)
Performs a authenticated GET against a MAAS endpoint
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- MAAS endpoint
.IP \(bu 2
\fBparams\fP \-\- extra data sent with the HTTP request
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B node_commission(system_id)
(Re)commission a node
.INDENT 7.0
.TP
.B Parameters
\fBsystem_id\fP \-\- machine identification
.TP
.B Returns
True on success False on failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B node_remove(system_id)
Delete a node
.INDENT 7.0
.TP
.B Parameters
\fBsystem_id\fP \-\- machine identification
.TP
.B Returns
True and success False on failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B node_start(system_id)
Power up a node
.INDENT 7.0
.TP
.B Parameters
\fBsystem_id\fP \-\- machine identification
.TP
.B Returns
True on success False on failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B node_stop(system_id)
Shutdown a node
.INDENT 7.0
.TP
.B Parameters
\fBsystem_id\fP \-\- machine identification
.TP
.B Returns
True on success False on failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B nodes
Nodes managed by MAAS
.INDENT 7.0
.TP
.B Returns
managed nodes
.TP
.B Return type
list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B nodes_accept_all()
Accept all commissioned nodes
.INDENT 7.0
.TP
.B Returns
Status
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B post(url, params=None)
Performs a authenticated POST against a MAAS endpoint
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- MAAS endpoint
.IP \(bu 2
\fBparams\fP \-\- extra data sent with the HTTP request
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag_delete(tag)
Delete a tag
.INDENT 7.0
.TP
.B Parameters
\fBtag\fP (\fIstr\fP) \-\- tag id
.TP
.B Returns
True on success False on failure
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag_fpi(maas)
Tag each DECLARED host with the FPI tag.
.sp
Also a little strange: we could define a tag with
\(aqdefinition=true()\(aq and automatically tag each node. However,
each time we un\-tag a node, maas evaluates the xpath
expression again and re\-tags it. So, we do it once, manually,
when the machine is in the DECLARED state (also to avoid
re\-tagging things that have already been tagged).
.INDENT 7.0
.TP
.B Parameters
\fBmaas\fP \-\- MAAS object representing all managed nodes
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag_machine(tag, system_id)
Tag the machine with the specified tag.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtag\fP (\fIstr\fP) \-\- Tag name
.IP \(bu 2
\fBsystem_id\fP (\fIstr\fP) \-\- ID of node
.UNINDENT
.TP
.B Returns
Success or Fail
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag_name(maas)
Tag each node as its hostname.
.sp
This is a bit ugly. Since we want to be able to juju deploy to
a particular node that the user has selected, we use juju\(aqs
constraints support for maas. Unfortunately, juju didn\(aqt
implement maas\-name directly, we have to tag each node with
its hostname for now so that we can pass that tag as a
constraint to juju.
.INDENT 7.0
.TP
.B Parameters
\fBmaas\fP \-\- MAAS object representing all managed nodes
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tag_new(tag)
Create tag if it doesn\(aqt exist.
.INDENT 7.0
.TP
.B Parameters
\fBtag\fP \-\- Tag name
.TP
.B Returns
Success/Fail boolean
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tags
List tags known to MAAS
.INDENT 7.0
.TP
.B Returns
List of tags or empty list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B users
List users on MAAS
.INDENT 7.0
.TP
.B Returns
List of registered users or an empty list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B zone_new(name, description=\(aqZone created by API\(aq)
Create a physical zone
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP \-\- Name of the zone
.IP \(bu 2
\fBdescription\fP \-\- Description of zone.
.UNINDENT
.TP
.B Returns
True on success False on failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B zones
List physical zones
.INDENT 7.0
.TP
.B Returns
List of managed zones or empty list
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fBcloudinstall.gui\fP \-\-\- GUI Interface
.sp
Pegasus \- gui interface to Ubuntu Cloud Installer
.INDENT 0.0
.TP
.B class cloudinstall.gui.ChangeStateDialog(underlying, machine, on_success, on_cancel)
Bases: \fBurwid.container.Overlay\fP
.INDENT 7.0
.TP
.B ChangeStateDialog.keypress(size, key)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.CommandRunner
Bases: \fBurwid.listbox.ListBox\fP
.INDENT 7.0
.TP
.B CommandRunner.add_machine()
.UNINDENT
.INDENT 7.0
.TP
.B CommandRunner.change_allocation(new_states, machine)
.UNINDENT
.INDENT 7.0
.TP
.B CommandRunner.deploy(charm, id=None, tag=None)
.UNINDENT
.INDENT 7.0
.TP
.B CommandRunner.keypress(size, key)
.UNINDENT
.INDENT 7.0
.TP
.B CommandRunner.poll()
.UNINDENT
.INDENT 7.0
.TP
.B CommandRunner.update(juju_state)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.ConsoleMode
Bases: \fBurwid.container.Frame\fP
.INDENT 7.0
.TP
.B ConsoleMode.tick()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.ControllerOverlay(underlying, command_runner)
Bases: \fBcloudinstall.gui.TextOverlay\fP
.INDENT 7.0
.TP
.B ControllerOverlay.NODE_SETUP = \(aqYour node has been correctly detected. Please wait until setup is complete \(aq
.UNINDENT
.INDENT 7.0
.TP
.B ControllerOverlay.NODE_WAIT = \(aqPlease wait while the cloud controller is installed on your host system.\(aq
.UNINDENT
.INDENT 7.0
.TP
.B ControllerOverlay.PXE_BOOT = \(aqYou need one node to act as the cloud controller. Please PXE boot the node you would like to use.\(aq
.UNINDENT
.INDENT 7.0
.TP
.B ControllerOverlay.process(data)
Process a node list. Returns True if the overlay still needs to be
shown, false otherwise.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.ListWithHeader(header_text)
Bases: \fBurwid.container.Frame\fP
.INDENT 7.0
.TP
.B ListWithHeader.selectable()
.UNINDENT
.INDENT 7.0
.TP
.B ListWithHeader.update(nodes)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.LockScreen(underlying, unlock)
Bases: \fBurwid.container.Overlay\fP
.INDENT 7.0
.TP
.B LockScreen.INVALID = (\(aqerror\(aq, \(aqInvalid password.\(aq)
.UNINDENT
.INDENT 7.0
.TP
.B LockScreen.IOERROR = (\(aqerror\(aq, \(aqProblem accessing /home/adam/.cloud\-install/openstack.passwd. Please make sure it contains exactly one line that is the lock password.\(aq)
.UNINDENT
.INDENT 7.0
.TP
.B LockScreen.LOCKED = \(aqThe screen is locked. Please enter a password (this is the password you entered for OpenStack during installation). \(aq
.UNINDENT
.INDENT 7.0
.TP
.B LockScreen.keypress(size, key)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.Node(machine, open_dialog)
Bases: \fBurwid.widget.Text\fP
.sp
A single ui node representation
.INDENT 7.0
.TP
.B Node.is_compute
.UNINDENT
.INDENT 7.0
.TP
.B Node.is_horizon
.UNINDENT
.INDENT 7.0
.TP
.B Node.keypress(size, key)
Signal binding for Node
.sp
Keys:
.INDENT 7.0
.IP \(bu 2
Enter \- Opens node state change dialog
.IP \(bu 2
F6 \- Opens charm deployments dialog
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.NodeViewMode(loop, get_data, command_runner)
Bases: \fBurwid.container.Frame\fP
.INDENT 7.0
.TP
.B NodeViewMode.do_update(machines)
Updating node states
.INDENT 7.0
.TP
.B Params list machines
list of known machines
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B NodeViewMode.keypress(size, key)
Signal binding for NodeViewMode
.sp
Keys:
.INDENT 7.0
.IP \(bu 2
F5 \- Refreshes the node list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B NodeViewMode.open_dialog(machine)
.UNINDENT
.INDENT 7.0
.TP
.B NodeViewMode.refresh_states()
Refresh states
.sp
Make a call to refresh both juju and maas machine states
.INDENT 7.0
.TP
.B Returns
data from the polling of services and the juju state
.TP
.B Return type
tuple (parse_state(), Machine())
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B NodeViewMode.target
.UNINDENT
.INDENT 7.0
.TP
.B NodeViewMode.tick()
.UNINDENT
.INDENT 7.0
.TP
.B NodeViewMode.total_nodes()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.PegasusGUI(get_data)
Bases: \fBurwid.main_loop.MainLoop\fP
.INDENT 7.0
.TP
.B PegasusGUI.run()
.UNINDENT
.INDENT 7.0
.TP
.B PegasusGUI.run_async(f, callback)
This is a little bit goofy. The urwid API is based on select(), and
can\(aqt actually run python functions asynchronously. So, if we want to
run a long\-running function which should update the UI, we have to get
a fd to have urwid watch for us, and then we send data to it when it\(aqs
done.
.sp
FIXME: Once \fI\%https://github.com/wardi/urwid/pull/57\fP is implemented.
.UNINDENT
.INDENT 7.0
.TP
.B PegasusGUI.tick(unused_loop=None, unused_data=None)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.gui.TextOverlay(text, underlying)
Bases: \fBurwid.container.Overlay\fP
.UNINDENT
.SS \fBcloudinstall.log\fP \-\-\- Log Interface
.sp
Logging interface
.sp
Simply exports \fIlogger\fP variable
.INDENT 0.0
.TP
.B cloudinstall.log.logger(name=\(aqubuntu\-cloud\-installer\(aq)
setup logging
.sp
Overridding the default log level(\fBdebug\fP) can be done via an environment variable \fIUCI_LOGLEVEL\fP
.sp
Available levels:
.INDENT 7.0
.IP \(bu 2
CRITICAL
.IP \(bu 2
ERROR
.IP \(bu 2
WARNING
.IP \(bu 2
INFO
.IP \(bu 2
DEBUG
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# Running cloud\-status from cli
$ UCI_LOGLEVEL=INFO cloud\-status
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Params str name
logger name
.TP
.B Returns
a log object
.UNINDENT
.UNINDENT
.SS \fBcloudinstall.machine\fP \-\-\- Maas/Juju machine representation
.INDENT 0.0
.TP
.B class cloudinstall.machine.Machine(machine_id, machine)
Bases: \fBbuiltins.object\fP
.sp
Base machine class
.INDENT 7.0
.TP
.B Machine.agent_state
Returns agent\-state
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.arch
Return architecture
.INDENT 7.0
.TP
.B Returns
architecture type
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.charms
Returns charms for machine
.INDENT 7.0
.TP
.B Returns
charms for machine
.TP
.B Return type
generator
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.container(container_id)
Inspect a container
.INDENT 7.0
.TP
.B Parameters
\fBcontainer_id\fP (\fIint\fP) \-\- lxc container id
.TP
.B Returns
Returns a dictionary of the container information for
specific machine and lxc id.
.TP
.B Return type
dict
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.containers
Return containers for machine
.INDENT 7.0
.TP
.B Return type
generator
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.cpu_cores
Return number of cpu\-cores
.INDENT 7.0
.TP
.B Returns
number of cpus
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.dns_name
Returns dns\-name
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.hardware(spec)
Get hardware information
.INDENT 7.0
.TP
.B Parameters
\fBspec\fP (\fIstr\fP) \-\- a hardware specification
.TP
.B Returns
hardware of spec
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.instance_id
Returns instance\-id of a machine
.INDENT 7.0
.TP
.B Returns
instance\-id of machine
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.is_machine_0
Checks if machine is bootstrapped node
.INDENT 7.0
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.mem
Return memory
.INDENT 7.0
.TP
.B Returns
memory size
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.storage
Return storage
.INDENT 7.0
.TP
.B Returns
storage size
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Machine.units
Return units for machine
.INDENT 7.0
.TP
.B Return type
list
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fBcloudinstall.pegasus\fP \-\-\- GUI helpers
.INDENT 0.0
.TP
.B exception cloudinstall.pegasus.MaasLoginFailure
Bases: \fBbuiltins.Exception\fP
.INDENT 7.0
.TP
.B MaasLoginFailure.MESSAGE = \(aqCould not read login credentials. Please run: maas\-get\-user\-creds root > ~/.cloud\-install/maas\-creds\(aq
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.pegasus.get_charm_relations(charm)
Return a list of (relation, command) of relations to add.
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.pegasus.juju_config_arg(charm)
Query configuration parameters for openstack charms
.INDENT 7.0
.TP
.B Parameters
\fBcharm\fP (\fIstr\fP) \-\- name of charm
.TP
.B Returns
path of openstack configuration
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.pegasus.parse_state(juju, maas=None)
Parses the current state of juju containers and maas nodes
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBjuju\fP (\fIJujuState()\fP) \-\- juju polled state
.IP \(bu 2
\fBmaas\fP \-\- maas polled state
.UNINDENT
.TP
.B Returns
nodes/containers
.TP
.B Return type
list
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.pegasus.poll_state()
Polls current state of Juju and MAAS
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.pegasus.wait_for_services()
Wait for services to be in ready state
.INDENT 7.0
.INDENT 3.5
.SS Todo
.UNINDENT
.UNINDENT
.sp
Is this still needed?
.UNINDENT
.SS \fBcloudinstall.service\fP \-\-\- Service Interface
.sp
Represents a Juju service
.INDENT 0.0
.TP
.B class cloudinstall.service.Relation(relation_name, charms)
Bases: \fBbuiltins.object\fP
.sp
Relation class
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.service.Service(service_name, service)
Bases: \fBbuiltins.object\fP
.sp
Service class
.INDENT 7.0
.TP
.B Service.charm
Charm
.INDENT 7.0
.TP
.B Returns
Charm Path
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Service.exposed
Exposed
.INDENT 7.0
.TP
.B Returns
if service is exposed
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Service.relations
Service relations
.INDENT 7.0
.TP
.B Returns
list of relations for service
.TP
.B Return type
Relation()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Service.unit(name)
Single unit entry
.INDENT 7.0
.TP
.B Params str name
name of unit
.TP
.B Returns
a Unit entry
.TP
.B Return type
Unit()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Service.units
Service units
.INDENT 7.0
.TP
.B Returns
list associated units for service
.TP
.B Return type
Unit()
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudinstall.service.Unit(unit_name, unit)
Bases: \fBbuiltins.object\fP
.sp
Unit class
.INDENT 7.0
.TP
.B Unit.agent_state
Unit\(aqs agent state
.INDENT 7.0
.TP
.B Returns
agent state
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Unit.machine_id
Associate machine for unit
.INDENT 7.0
.TP
.B Returns
machine id
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Unit.public_address
Public address of unit
.INDENT 7.0
.TP
.B Returns
address of unit
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fBcloudinstall.utils\fP \-\-\- Utility helpers
.INDENT 0.0
.TP
.B cloudinstall.utils.console_blank(*args, **kwds)
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.get_command_output(command, timeout=300)
Execute command through system shell
.INDENT 7.0
.TP
.B Parameters
\fBcommand\fP (\fIstr\fP) \-\- command to run
.TP
.B Returns
(returncode, stdout, 0)
.TP
.B Return type
tuple
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# Get output of juju status
ret, out, rtime = utils.get_command_output(\(aqjuju status\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.get_network_interface(iface)
Get network interface properties
.INDENT 7.0
.TP
.B Parameters
\fBiface\fP (\fIstr\fP) \-\- Interface to query (ex. eth0)
.TP
.B Returns
interface properties or empty if none
.TP
.B Return type
dict
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# Get address, broadcast, and netmask of eth0
iface = utils.get_network_interface(\(aqeth0\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.get_network_interfaces()
Get network interfaces
.INDENT 7.0
.TP
.B Returns
available interfaces and their properties
.TP
.B Return type
generator
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.partition(pred, iterable)
Returns tuple of allocated and unallocated systems
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpred\fP (\fIfunction\fP) \-\- status predicate
.IP \(bu 2
\fBiterable\fP (\fIlist\fP) \-\- machine data
.UNINDENT
.TP
.B Returns
([allocated], [unallocated])
.TP
.B Return type
tuple
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
def is_allocated(d):
    allocated_states = [\(aqstarted\(aq, \(aqpending\(aq, \(aqdown\(aq]
    return \(aqcharms\(aq in d or d[\(aqagent_state\(aq] in allocated_states
allocated, unallocated = utils.partition(is_allocated, [{state: \(aqpending\(aq}])
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.randomString(size=6, chars=\(aqABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\(aq)
Generate a random string
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsize\fP (\fIint\fP) \-\- number of string characters
.IP \(bu 2
\fBchars\fP (\fIstr\fP) \-\- range of characters (optional)
.UNINDENT
.TP
.B Returns
a random string
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.reset_blanking()
.UNINDENT
.INDENT 0.0
.TP
.B cloudinstall.utils.time()
Time helper
.INDENT 7.0
.TP
.B Returns
formatted current time string
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.SH AUTHOR
Solutions Engineering
.SH COPYRIGHT
2014, Canonical Ltd
.\" Generated by docutils manpage writer.
.
