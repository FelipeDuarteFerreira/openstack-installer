#!/usr/bin/env python3
# -*- mode: python; -*-
#
# Copyright 2014 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

""" CLI for creating lxc containers needed by the installer """

import argparse
import sys
import os
import logging
from subprocess import call
from cloudinstall import utils
from cloudinstall.gui import (PegasusGUI, InstallHeader)
from cloudinstall.install import InstallController
from cloudinstall import log
from cloudinstall.config import Config


def parse_options(*args, **kwds):
    parser = argparse.ArgumentParser(description='Ubuntu Openstack Installer',
                                     prog='cloud-status')
    parser.add_argument('-s', '--enable-swift', action='store_true',
                        dest='enable_swift', default=False,
                        help='Enable swift storage')
    parser.add_argument('-i', '--install-only', action='store_true',
                        dest='install_only', default=False,
                        help='install only (dont invoke cloud-status)')
    parser.add_argument('-u', '--uninstall', action='store_true',
                        dest='uninstall', default=False,
                        help='Uninstalls the current cloud including removing'
                        'of packages.')
    parser.add_argument('-k', '--kill', action='store_true',
                        dest='killcloud', default=False,
                        help='Tear down existing cloud leaving userdata '
                        'in place. Useful for iterative deploys.')
    parser.add_argument('-a', type=str, default=None,
                        help='<arch, ..> comma-seperated list of '
                        'architectures to filter available cloud '
                        'images with which to populate Glance, '
                        'e.g. amd64,arm64', dest='arch')
    parser.add_argument('-r', type=str, default=None, dest='release',
                        help='<rel, ..> comma-seperated list of Ubuntu '
                        'releases to filter available cloud images with '
                        'which to populate Glance, e.g. precise,trusty')
    parser.add_argument('--with-maas-address', type=str,
                        dest='with_maas_address',
                        help='Specify an existing MAAS ip address')
    parser.add_argument('--with-maas-apikey', type=str,
                        dest='with_maas_apikey',
                        help='Specify a MAAS admin user apikey')
    return parser.parse_args()


if __name__ == '__main__':
    log.setup_logger()
    logger = logging.getLogger('cloudinstall')
    opts = parse_options(sys.argv)
    cfg = Config()

    if os.geteuid() != 0:
        print("Installing a cloud requires root privileges. Rerun with sudo")
        sys.exit(1)

    if opts.uninstall:
        log.info("Restoring system to last known state.")
        ret = call(['/usr/share/openstack/tools/openstack-uninstall'],
                   shell=True)
        raise SystemExit

    if opts.killcloud:
        if cfg.is_single:
            log.info("Removing existing single installation.")
            utils.container_stop('uoi-bootstrap')
            utils.container_destroy('uoi-bootstrap')
            raise SystemExit
        else:
            raise SystemExit('Only supports killing a single install for now.')

    user_install_dir = os.path.join(utils.install_home(), '.cloud-install')
    if not os.path.exists(user_install_dir):
        os.makedirs(user_install_dir)

    install = InstallController(
        ui=PegasusGUI(header=InstallHeader()), opts=opts)
    logger.info("cloud-install starting")

    install.start()
