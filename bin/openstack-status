#!/usr/bin/env python3
# -*- mode: python; -*-
#
# Copyright 2014 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
import os
import signal
import sys
import yaml
# Handle imports where the path is not automatically updated during install.
# This really only happens when a binary is not in the usual /usr/bin location
lib_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, lib_dir)

from cloudinstall.gui import PegasusGUI
from cloudinstall.core import Controller
from cloudinstall import utils
from cloudinstall import log
from cloudinstall.config import Config
from cloudinstall import __version__ as version


def sig_handler(signum, frame):
    sys.exit(1)

for sig in (signal.SIGTERM, signal.SIGQUIT, signal.SIGINT, signal.SIGHUP):
    signal.signal(sig, sig_handler)


def parse_options(*args, **kwds):
    parser = argparse.ArgumentParser(description='Ubuntu Openstack Installer',
                                     prog='openstack-status')
    parser.add_argument('--placement', action='store_true',
                        dest='edit_placement', default=False,
                        help='Show machine placement UI before deploying')
    parser.add_argument('-c', '--config', type=str, dest='config_file',
                        help="Custom configuration for OpenStack installer.")
    parser.add_argument(
        '--version', action='version', version='%(prog)s {}'.format(version))
    return parser.parse_args()

if __name__ == '__main__':
    opts = parse_options(sys.argv)

    try:
        log.setup_logger()
    except PermissionError:
        print("Permission error accessing log file.\n"
              "This probably indicates a broken partial install.\n"
              "Please use 'openstack-install -u' to uninstall, "
              "and try again.\n"
              "(You may want to save a copy of ~/.cloud-install/commands.log"
              " for reporting a bug.)")
        sys.exit()

    logger = logging.getLogger('openstack-status')
    logger.info("openstack-status starting")

    if opts.config_file and os.path.exists(opts.config_file):
        _cfg = yaml.load(utils.slurp(opts.config_file))
    else:
        _cfg = {}
    # Update cfg dict with command line opts
    _cfg.update(vars(opts))
    config = Config(cfg_obj=_cfg)

    if os.path.isfile(config.pidfile):
        print("Another instance of openstack-status is running. If you're "
              "sure there are no other instances, please remove "
              "~/.cloud-install/openstack.pid")
        sys.exit()

    # Run openstack-status within container on single installs
    out = utils.get_command_output('hostname', user_sudo=True)
    hostname = out['output'].rstrip()
    if config.is_single and 'uoi-bootstrap' not in hostname:
        logger.info("Running status within container")
        utils.container_run_status('uoi-bootstrap', 'openstack-status')
    gui = PegasusGUI()
    core = Controller(ui=gui, opts=opts)
    try:
        # Create pidfile
        utils.spew(config.pidfile, str(os.getppid()), utils.install_user())

        import atexit
        atexit.register(utils.cleanup)
        sys.exit(core.start())
    except Exception as e:
        logger.exception("core.start() raised exception")
        print("There was a problem running the status screen.")
        print("Please check ~/.cloud-install/commands.log")
        print("Error: {}".format(e))
        sys.exit(1)
